{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","cardComponent","map","robot","i","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","res","json","users","filteredRobots","filter","toLowerCase","includes","length","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OA4BeA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,sBAAKC,UAAU,mDAAf,UACE,qBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,UACzD,gCACE,6BAAKJ,IACL,4BAAIC,WCCGI,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACZC,EAAgBD,EAAOE,KAAI,SAACC,EAAOC,GAAR,OAC/B,cAAC,EAAD,CAEEX,GAAIO,EAAOI,GAAGX,GACdC,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,OAHZS,MAMT,OACE,8BACGH,KCCQI,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,qBAAKV,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,O,MCQHI,MAff,SAAgBC,GAEd,OACE,qBACEC,MAAO,CACLC,SAAU,SACVC,OAAQ,iBACRC,OAAQ,SAJZ,SAOGJ,EAAMK,YCYEC,EAtBf,kDACE,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHK,EADrB,qDASE,SAAkBC,EAAOC,GAEvBC,KAAKC,SAAS,CAAEJ,UAAU,MAX9B,oBAcE,WACE,OAAIG,KAAKJ,MAAMC,SACN,0DAEFG,KAAKX,MAAMK,aAlBtB,GAAmCQ,aC+DpBC,E,kDAvDb,aAAe,IAAD,8BACZ,gBAsBFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAtB1C,EAAKZ,MAAQ,CAEXlB,OAAQ,GACR4B,YAAa,IALH,E,qDAcd,WAAqB,IAAD,OAIlBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKZ,SAAS,CAAEvB,OAAQmC,S,oBAS7C,WACE,MAAgCb,KAAKJ,MAA7BlB,EAAR,EAAQA,OAAQ4B,EAAhB,EAAgBA,YACVQ,EAAiBpC,EAAOqC,QAAO,SAAClC,GAAD,OACnCA,EAAMT,KAAK4C,cAAcC,SAASX,EAAYU,kBAMhD,OAAQtC,EAAOwC,OAGb,sBAAK5C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU1B,OAAQoC,WAPxB,gD,GAzCYK,IAAMjB,WCITkB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.54f0344c.chunk.js","sourcesContent":["import React from \"react\";\n\n// older way of destructuring props\n// const Card = (props) =>{\n//     return(\n//         <div className='bg-light-green br3 dib ma3 pa3 grow bw2 shadow-5'>\n//         <img src={`https://robohash.org/${props.id}?200*200`} alt=\"Robots\" />\n//         <div>\n//             <h1>{props.name}</h1>\n//             <p>{props.email}</p>\n//         </div>\n//         </div>\n//     )\n// }\n\n// Newer and modern way of destructuring props\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"bg-light-green br3 dib ma2 pa3 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?size=200x200`} alt=\"Robot\" />\n      <div>\n        <h3>{name}</h3>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  const cardComponent = robots.map((robot, i) => (\n    <Card\n      key={i}\n      id={robots[i].id}\n      name={robots[i].name}\n      email={robots[i].email}\n    />\n  ));\n  return (\n    <div>\n      {cardComponent}\n      {/* <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\n      <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\n      <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} />\n      <Card id={robots[3].id} name={robots[3].name} email={robots[3].email} /> */}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Searchbox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 bg-lightest-blue b--green ba\"\n        type=\"search\"\n        placeholder=\"Search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default Searchbox;\n","import React from \"react\";\n\nfunction Scroll(props) {\n  // console.log(props.children);\n  return (\n    <div\n      style={{\n        overflow: \"scroll\",\n        border: \"2px solid blue\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n}\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nexport class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props); //here we need it to get access to this.props\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  //  componentDidCatch: This method is called when a component or any children component encounters some error during the React Component Lifecycle. This method allows us to handle the error boundaries of the application.\n  componentDidCatch(error, info) {\n    //it is to log the errors\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops.. this is not good.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React from \"react\";\nimport CardList from \"./../Components/CardList\";\n// import { robots } from \"./robots\";\nimport Searchbox from \"./../Components/Searchbox\";\nimport \"./App.css\";\nimport Scroll from \"./../Components/Scroll\";\nimport ErrorBoundary from \"./../Components/ErrorBoundary\";\n\nclass App extends React.Component {\n  // to use state we have to use class, not fuction.\n  constructor() {\n    super();\n    this.state = {\n      //using this because class is a object\n      robots: [],\n      searchField: \"\",\n    };\n    // console.log(\"constructor\");\n  }\n\n  //One really useful way to use componentDidMount is for AJAX requests. So, imagine a situation where you want to get a list of Comments for an Article. After the component is created you may want to go retrieve the list of comments from the server and then display them to the user.\n\n  //In practice, componentDidMount is the best place to put calls to fetch data, for two reasons: Using didMount makes it clear that data won't be loaded until after the initial render. This reminds you to set up initial state properly, so you don't end up with undefined state that causes errors.\n\n  componentDidMount() {\n    //comPonentDidMount is using to fetch api\n    // this.setState({ robots: robots });\n    // console.log(\"componentDidMount\");\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((users) => this.setState({ robots: users }));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n\n    // console.log(filteredRobots);\n  };\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter((robot) =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    // console.log(\"render\");\n    // if (this.state.robots.length === 0) {\n    //   return <h1 className=\"tc f1\">Loading</h1>;\n    // } else {\n    return !robots.length ? (\n      <h1>Loading...</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <Searchbox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n        {/* We have to use 'this', if it is a object. If it is a function there is no need for 'this'. */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Containers/App\";\n// import Hello from './Hello'\nimport \"tachyons\"; //to include 'tachyons' in the project\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Hello greeting = {'I am a ' + 'react Ninja.'}/> */}\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}